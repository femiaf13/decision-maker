package main

import (
	"fmt"
)

var voteTablePadding = "px-6 py-3"
var voteTableButtonStyle = "bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-2 py-2.5 me-2 mb-2"

templ Root(votes []Vote) {
	<button 
		type="button"
		hx-get="/vote"
		hx-target="#all-votes-table"
		hx-swap="outerHTML"
	>
		Refresh votes
	</button>
	@AllVotesTable(votes)
	@CreateNewVote()
}

// Create a table for all current votes
templ AllVotesTable(votes []Vote) {
	<div id="all-votes-table">
		<div class="relative rounded-lg m-4 p-2">
			<div class="relative bg-violet-600 text-white max-w-fit mx-auto rounded-lg">
				<table class="relative table-auto text-white m-2">
					<thead class="uppercase text-pink-300">
						<tr>
							<th class={voteTablePadding}>Vote Title</th>
							<th class={voteTablePadding}># of Votes</th>
							<th class={voteTablePadding}>Created at</th>
							<th class={voteTablePadding}></th>
							<th class={voteTablePadding}></th>
						</tr>
					</thead>
					<tbody id="tbody">
					for _, vote := range votes {
						<tr>
							<td class={voteTablePadding}>{ vote.Title }</td>
							<td class={voteTablePadding}>{ fmt.Sprintf("%d", vote.NumberVoters) }</td>
							<td class={voteTablePadding}>{ vote.CreatedAt.Format("2006-01-02 15:04:05") }</td>
							<td>
								<button
									type="button"
									hx-get={ fmt.Sprintf("/vote/%d", vote.ID)}
									hx-swap="outerHTML"
									class={voteTableButtonStyle}
								>
									Vote
								</button>
							</td>
							<td>
								<button 
									type="button"
									hx-get={ fmt.Sprintf("/results/%d", vote.ID)}
									hx-swap="outerHTML"
									class={voteTableButtonStyle}
								>
									See Results
								</button>
							</td>
						</tr>
					}
					</tbody>
				</table>
				<br><br>
			</div>
		</div>
	</div>
}

templ CreateNewVote() {
	<div
		class="relative rounded-lg p-2"
	>
		<form
			id="vote"
			hx-post="/newvote"
			hx-swap="outerHTML"
			class="relative bg-violet-600 text-white max-w-sm mx-auto rounded-lg"
		>
			<div class="m-5">
				<label class="block mb-2 text-base font-medium p-1" for="title">Title of the vote:</label>
				<input class="form-input rounded-lg block w-full p-2.5 text-base text-black" type="text" name="title"/>
			</div>
			for i := 0; i < 2; i++ {
				@CreateNewChoice(uint(i), false)
			}
			@anotherChoicebutton()
			<input type="submit" value="Submit" class="absolute right-1 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2"/>
		</form>
	</div>
}

templ CreateNewChoice(choiceNumber uint, addNewButton bool) {
	<div class="m-5 pb-1">
		<label class="block text-base font-medium mb-2 p-1" for={ fmt.Sprintf("choice_%d", choiceNumber) }>Choice:</label>
		<input class="form-input rounded-lg block w-full mb-2 p-2.5 text-base text-black" type="text" name={ fmt.Sprintf("choice_%d", choiceNumber) }/>
	</div>
	if addNewButton {
		// <button hx-post="/newchoice" hx-swap="outerHTML" type="button">Add another choice</button>
		@anotherChoicebutton()
	}
}

templ anotherChoicebutton() {
	<button 
		hx-post="/newchoice" 
		hx-swap="outerHTML" 
		type="button"
		class="absolute left-1 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2">
	+
	</button>
}

templ VoteTemplate(vote Vote) {
	<div
		class="relative rounded-lg m-4 p-2"
	>
		<form
			hx-patch="/vote"
			hx-vals={ fmt.Sprintf("{\"id\": %d}", vote.ID) }
			hx-confirm="Are you sure you wish to submit your vote?"
			hx-swap="outerHTML"
			class="relative bg-violet-600 text-white max-w-sm mx-auto rounded-lg"
		>
			<table class="table-auto text-white m-2">
				<thead class="uppercase text-pink-300">
					<tr>
						<th class={voteTablePadding}>{ vote.Title }</th>
						<th class={voteTablePadding}>Approve?</th>
					</tr>
				</thead>
				<tbody id="tbody">
					for _, choice := range vote.Choices {
						<tr>
							<td class={voteTablePadding}>{ choice.Text }</td>
							<td class={voteTablePadding}><input type="checkbox" name={ choice.Text }/></td>
						</tr>
					}
				</tbody>
			</table>
			<input type="submit" value="Vote" class="absolute right-1 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2"/>
		</form>
	</div>
	
}

templ VoteResults(vote Vote) {
	<div class="relative rounded-lg m-4 p-2">
		<div class="relative bg-violet-600 text-white max-w-sm mx-auto rounded-lg">
			<table class="relative table-auto text-white m-2">
				<thead class="uppercase text-pink-300">
					<tr>
						<th class={voteTablePadding}>{ vote.Title }</th>
						<th class={voteTablePadding}>Approvals</th>
					</tr>
				</thead>
				<tbody id="tbody">
					for _, choice := range vote.Choices {
						<tr>
							<td class={voteTablePadding}>{ choice.Text }</td>
							<td class={voteTablePadding}>{ fmt.Sprintf("%d", choice.Approvals) }</td>
						</tr>
					}
				</tbody>
			</table>
			<br><br>
			<div class={voteTablePadding}><strong>Total voters: { fmt.Sprintf("%d", vote.NumberVoters) }</strong></div>
		</div>
	</div>
}